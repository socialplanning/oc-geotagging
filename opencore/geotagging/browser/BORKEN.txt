Feeds for Projects
------------------


These are all anonymously viewable::

    >>> self.logout()

The Projects collection can be adapted to a sequence of dictionaries
suitable for building a georss view::

    >>> view = projects.restrictedTraverse('@@geo')
    >>> info = list(view.forRSS())
    >>> len(info)
    1
    >>> info = info[0]  #XXX what order do they come back in?

    Note that coords_georss is latitude-longitude, so you get them
    back in the reverse order:

    >>> info['coords_georss']
    '12.000000 -87.000000'
    >>> info['geometry']['type']
    'Point'
    >>> info['geometry']['coordinates']
    (-87.0, 12.0, 0.0)
    >>> info['hasLineString']
    0
    >>> info['hasPoint']
    1
    >>> info['hasPolygon']
    0
    >>> info['id'] == project_name
    True
    >>> print info['geometry']['coordinates']
    (-87.0, 12.0, 0.0)
    >>> info['properties']['description']
    'No description'
    >>> info['properties']['link']
    'http://nohost/plone/projects/p3'

#    >>> info['properties']['title']
#    'IGNORANCE IS STRENGTH'

(Unfortunately it's hard to assert much about dates...  it should
look iso8601-ish.)

    >>> info['properties']['updated']
    '...-...-...T...:...:...'
    >>> info['properties']['created'] == info['properties']['created']
    True


You can also adapt to a view suitable for building kml::

    >>> view = projects.restrictedTraverse('@@geo')
    >>> info = list(view.forKML())
    >>> len(info)
    1
    >>> info = info[0]

    Note that coords_kml is of the form longitude,latitude,z.

    >>> info['coords_kml']
    '-87.000000,12.000000,0.000000'
    >>> info['geometry']['type']
    'Point'
    >>> print info['geometry']['coordinates']
    (-87.0, 12.0, 0.0)
    >>> info['hasLineString']
    0
    >>> info['hasPoint']
    1
    >>> info['hasPolygon']
    0
    >>> info['id'] == project_name
    True

#    >>> info['properties']['title']
#    'IGNORANCE IS STRENGTH'

The projects georss view is exposed by a separate view that generates
xml.

    >>> feedview = projects.restrictedTraverse('@@georss')
    >>> xml = get_response_output(feedview)
    >>> lines = [s.strip() for s in xml.split('\n') if s.strip()]

#    >>> print '\n'.join(lines)
#    Status: 200 OK...
#    <?xml...
#    <feed
#    ...xmlns="http://www.w3.org/2005/Atom"...
#    <title>Projects</title>
#    <link rel="self" href="http://nohost/plone/projects"/>...
#    <entry>
#    <title>IGNORANCE IS STRENGTH</title>...
#    <id>http://nohost/plone/projects/p3</id>...
#    <georss:where><gml:Point>
#    <gml:pos>12.000000 -87.000000</gml:pos>
#    </gml:Point>...


And a separate view that generates kml markup::

    >>> feedview = projects.restrictedTraverse('@@kml')
    >>> xml = feedview()
    >>> lines = [s.strip() for s in xml.split('\n') if s.strip()]

#    >>> print '\n'.join(lines)
#    <?xml...
#    <kml xmlns="http://earth.google.com/kml/2.1">
#    <Document>...
#    <name>Projects</name>...
#    <Placemark>
#    <name>IGNORANCE IS STRENGTH</name>
#    <description>...
#    <p>URL:
#    <a href="http://nohost/plone/projects/p3">http://nohost/plone/projects/p3</a>...
#    <Point>
#    <coordinates>-87.000000,12.000000,0.000000</coordinates>
#    </Point>...
#    </kml>



Profile edit views for Members
------------------------------

The view has a geo_info attribute containing pretty much everything
needed to build the UI::

    >>> people = portal.people
    >>> m1 = people.m1
    >>> self.login('m1')
    >>> view = m1.restrictedTraverse('@@profile-edit')
    >>> view.request.form.clear()
    >>> viewlet = MemberProfileViewlet(view.context, view.request,
    ...                                view, 'irrelevant')
    >>> pprint(viewlet.geo_info)
    {'is_geocoded': False,
     'location': '',
     'maps_script_url': '...',
     'position-latitude': '',
     'position-longitude': '',
     'position-text': '',
     'static_img_url': ''}

Submitting the form updates everything, and we get a static image url now::

    >>> view.request.form.update({'position-latitude': 45.0,
    ...  'position-longitude': 0.0, 'location': 'somewhere', })
    >>> redirected = view.handle_form()
    >>> view.request.form.clear()
    >>> view = m1.restrictedTraverse('@@profile-edit')

#    >>> pprint(viewlet.geo_info)
#    {'is_geocoded': True,
#     'location': 'somewhere',
#     'maps_script_url': '...',
#     'position-latitude': 45.0,
#     'position-longitude': 0.0,
#     'position-text': '',
#     'static_img_url': 'http://...'}

Submitting the form with position-text should cause the (mock)
geocoder to be used::

    >>> view = m1.restrictedTraverse('@@profile-edit')
    >>> view.request.form.clear()
    >>> viewlet = MemberProfileViewlet(view.context, view.request,
    ...                                view, 'irrelevant')
    >>> view.request.form.update({'position-text': 'atlantis',
    ...     'location': 'somewhere underwater', })
    ...

#    >>> redirected = view.handle_form()
#    Called ...geocode('atlantis')

    >>> utils.clear_all_memos(view)  # XXX Ugh, make this unnecessary.

#    >>> pprint(viewlet.geo_info)
#    {'is_geocoded': True,
#     'location': 'somewhere underwater',
#     'maps_script_url': '...',
#     'position-latitude': 12.0,
#     'position-longitude': -87.0,
#     'position-text': 'atlantis',
#     'static_img_url': 'http://...'}


The public profile view should show the same data::

    >>> self.logout()
    >>> pview = m1.restrictedTraverse('@@profile')
    >>> pview.request.form.clear()
    >>> pviewlet = MemberProfileViewlet(pview.context, pview.request,
    ...                                 pview, "irrelevant manager")
    >>> pviewlet.geo_info == viewlet.geo_info
    True


Feeds for Members
------------------

A bit of setup here to avoid depending on previous tests, yuck::

    >>> self.login('m1')
    >>> edit = m1.restrictedTraverse('profile-edit')
    >>> edit.request.form.clear()
    >>> edit.request.form.update({'location': 'nowhere', 'position-latitude': -66.0,
    ...      'position-longitude': 55.0})

    >>> redirected = edit.handle_form()


First try the views that generate info, should be public::

    >>> self.logout()
    >>> view = people.restrictedTraverse('@@geo')
    >>> info = list(view.forRSS())

#    >>> len(info)
#    1
#
#    >>> pprint(info)
#    [{'coords_georss': '-66.000000 55.000000',
#      'geometry': {'type': 'Point', 'coordinates': (55.0, -66.0, 0.0)},
#      'hasLineString': 0,
#      'hasPoint': 1,
#      'hasPolygon': 0,
#      'id': 'm1',
#      'properties': {...}}]
#    >>> pprint(info[0]['properties'])
#    {'created': '...-...-...T...:...:...',
#     'description': 'No description',
#     'language': '',
#     'link': 'http://nohost/plone/people/m1',
#     'location': 'nowhere',
#     'title': 'Member One',
#     'updated': '...-...-...T...:...:...'}


And similar info for generating kml::

#    >>> info = list(view.forKML())
#    >>> len(info)
#    1
#    >>> pprint(info)
#    [{'coords_kml': '55.000000,-66.000000,0.000000',...


Now the actual georss xml feed::

    >>> feedview = portal.people.restrictedTraverse('@@georss')
    >>> xml = get_response_output(feedview)
    >>> lines = [s.strip() for s in xml.split('\n') if s.strip()]

#    >>> print '\n'.join(lines)
#    <?xml version="1.0"...
#    <title>People</title>
#    <link rel="self" href="http://nohost/plone/people"/>...
#    <id>http://nohost/plone/people</id>
#    <entry>
#    <title>Member One</title>...
#    <updated>...-...-...T...:...:...</updated>...
#    <georss:where><gml:Point>
#    <gml:pos>-66.000000 55.000000</gml:pos>
#    </gml:Point>...


Now the actual kml feed::

    >>> feedview = portal.people.restrictedTraverse('@@kml')
    >>> xml = feedview()
    >>> lines = [s.strip() for s in xml.split('\n') if s.strip()]

#    >>> print '\n'.join(lines)
#    <?xml...
#    <kml xmlns="http://earth.google.com/kml/2.1">
#    <Document>...
#    <name>People</name>...
#    <Placemark>
#    <name>Member One</name>
#    <description>...
#    <p>URL:
#    <a href="http://nohost/plone/people/m1">http://nohost/plone/people/m1</a>...
#    <Point>
#    <coordinates>55.000000,-66.000000,0.000000</coordinates>
#    </Point>...
#    </kml>
